INVALIDATION

ideally we would have a concept of invalidation that is at the center of any
behavior that deals with updating the ui based on the state of the application.

any such behavior in other components should be piggybacking on this invalidate
implementation. take f.e. flaggable, in the use case of selecting a set of tags.
the raison d'etre of flaggable is being able to manage and persist a set of
flagged data items. for convenience the module allows to define event bindings
as glue between the dom and the flaggable api. now another convenience that is
included into flaggable is a way of easily updating the ui of these same dom
elements. in the essence this is the responsibility of invalidation though.
imagine that this ui updating convenience is not included into flaggable. there
would be no invalidateFlagged or invalidateUnflagged callbacks. you would use
the toggle callback to find all dom elements that represent the tags that were
affected (whose flag-state has been toggled). then you would trigger invalidate
on them. then you would have an invalidate handler on all tag-dom-elements that
would implement all the invalidation behavior. part (or all) of this behavior
would be to reflect the current flag-state of that particular tag. as soon as
you have this, you realize that this construction does not care if these dom
elements are the same as the ones that are used to initiate flag-state-change.
you could decide that you want them to be others, or include elements that are
outside the scope of flaggable altogether (f.e. tags that are displayed inside
contact list items). now obviously in most scenarios the elements that inflict
flag-state-change are the exact same elements as the ones whose ui needs to be
updated as a result of a change in the selected set. this is why it is not a bad
idea to add convenient invalidation helpers to the flaggable component. but
these would ideally be implemented using the approach as just described. so that
would mean finding from the dom elements that are used to incur
flag-state-change those who correspond with the data item that was added or
removed from the set of flagged items. then triggering invalidate on them. then
having an invalidate handler bound to all tag-dom-elements, in which we check if
the element on which the event is handled is currently flagged or unflagged,
then calling the invalidateFlagged or invalidateUnflagged callback accordingly.

some remarks with this setup:

we trigger invalidate on elements that are not actually invalidated (their
flag-state merely changed, but that is not the same thing(?)). right now i cannot
think of a reason why this would be a problem or a bad thing, but it's a risk.
along the same lines; i'm not sure if it is a good idea to have other components
than dataview trigger invalidate. as dataview is in charge of building a dom
view of data, it is in essence the only one that should need to trigger
invalidate. and strictly speaking flaggable does not *need* to trigger
invalidate, as it is not invalidating anything. but yet the same should then be
true for the client code (outside the flaggable module). why *does* this code
need to trigger invalidate then?
let's do some definitions:
. handling the invalidate event = tell me when something happened that means the
ui needs to be updated.
. calling an invalidate method (on dataview f.e.) = do something that will
result in invalidate events being triggered.
. triggering the invalidate event = i did something that entails that the ui needs
to be updated.
when looking at these definitions i tend to conclude that it *is* ok to trigger
invalidate inside flaggable (or client code), as it did something that entails
that the ui needs to be updated. it is actually invalidating something, namely
changing the flag-state of a data item that we know is attached to the dom
element that inflicted the flag-state-change!

the invalidateFlagged and invalidateUnflagged callbacks will have a different
api as a result of this setup. currently they are being called once for every
change in the set of flagged items, and all affected items are passed to it as
a parameter. in the new approach they are really extensions of the invalidate
handler, which means that they will behave like invalidate handlers, which is
taking one element at the time (in its context variable -- this). then again;
this doesn't feel right either. invalidateFlagged & (...) are widget-callbacks;
which means that their context is always the widget. which makes sense because
they claim to talk about the widget and nothing but the widget. they are at the
same time events that are being triggered on the widget, which would logically
result in their handlers' context being the widget. and not a tag. in addition;
we already have an event that we can handle on the tag level; it's called
invalidate. we can easily check the tag's flag-state by asking flaggable.








(function($) {

	$.fn.chain = function(func) {
		return func.apply(this, Array.prototype.slice.call(arguments, 1));
	};
	
}(jQuery));

(function($) {
	
	dict = function(data) {
		if (!(this instanceof dict)) {
			return new dict(data);
		}
		this.data = data || {};
	};
	
	dict.prototype = {
		get: function(key, def) {
			return key in this.data ? this.data[key] : def;
		}
	};
	
	element.ns.field.nested
	
	$(element).dict('ns.field.nested[]', 'value');
	$(element).dict(ns, field).nested = 'value';
	
	$(element).set(ns, field, nested, 'value');
	$(element).set(ns, field, nested, []
	$(element).get(ns, field, nested);
	$(element).get(query);
	
	$(element).dict(ns).get(field).set(nested, 'value');
	$(element).dict(ns).get(field).setdefault(nested, 'value');
	
	$.data(ns).
	
	// element -> global -> cookie
	
	
//	var d = dict();
//	
//	d.setdefault('field', dict()).
//	
//	$('body').$data(NS, dict).
	
}(jQuery));

/*
(function($) {
	
	$.fn.nsdata
	$.fn.nsopt = function(ns, [opt])
	$.nsdata
	$.nsopt = function(ns, [opt])
	$.nsoptDefine = function(ns, definition)
	
}(jQuery));

(function($) {
	
	// plugin factory design
	// - data namespace: $.myplugin
	// - global methods: $.myplugin.globalMethod
	// - public methods: $.fn.myplugin
	// - $.pluginData:
	//		global options (page, session)
	//		global data (page, session)
	//		$.fn.pluginData:
	//			element options
	//			element data
	// - private methods: var func = function() {}; $.fn.chain(func, args)
	
	var NS = 'myplugin',
		PRIV = $.plugin(NS).priv;
	
	$.fn.$priv
	$.fn.$data
	$.fn.$opt
	
	$.$[NS] = < all stuff >
	
	$('body').$data(NS, [type])
	$('body').$opt(NS)
	$('body').$priv(NS, 'anInternalMethod', arg1, arg2)
	$.$data(NS)
	$.$opt(NS)
	
	$.$create(NS, {
		opt: {
			anoption: ['defaultvalue', $.$persist.ELEMENT],
		},
		pub: {
			_: function(opt) {
				opt = this.$opt(NS, opt);
				$('body').$priv(NS, 'anInternalMethod', arg1, arg2);
			}
		},
		priv: {
			anInternalMethod: function() {
			}
		},
		glob:
	});
	
	$.plugin({
		ns: NS,
		opt: {
		},
		pub: {
			_: function(opt) {
				opt = this.nsopt(NS, opt);
				anInternalMethod.call($('body'), arg1, arg2);
				$('body').chain(anInternalMethod, arg1, arg2);
				$('body').chain(PRIV.anInternalMethod, arg1, arg2);
				$('body').plugin(NS, 'anInternalMethod', arg1, arg2);
			}
		},
		glob: {
		},
		priv: {
		}
	});
	
}(jQuery));
*/


// flagable design:

$('ul').flagable({
	type: 'check',
	item: '> li',
	eventType: 'click',
	sync: ':checkbox'
});




// templating design:

- use resig's micro-templating solution: http://ejohn.org/blog/javascript-micro-templating/
- include fix for single quotes: http://www.west-wind.com/Weblog/posts/509108.aspx
- use jqote syntax: http://aefxx.com/jquery-plugins/jqote/
- add cdata stripping (jqote) (do we need this? do we want this? is html5 cdata compliant?)

syntax:
	    	<ul id="flagme">
                <script type="text/smesh">
                    <li>
                    	<input type="checkbox" /><%= text %>
                    </li>
                </script>
	    	</ul>
	    	
	    	$('#flagme').smesh(data);

philosophy:
- implicit template definition and identification
    * definition = <script type="text/smesh">
    * identifaction = is in the element in which it will be applied
- template caching on the element and using jquery.al.data.js



/*
// templating design:

- use resig's micro-templating solution: http://ejohn.org/blog/javascript-micro-templating/
- include fix for single quotes: http://www.west-wind.com/Weblog/posts/509108.aspx
- use jqote syntax: http://aefxx.com/jquery-plugins/jqote/
- add cdata stripping (jqote) (do we need this? do we want this? is html5 cdata compliant?)

syntax:
	    	<ul id="flagme">
                <script type="text/smesh">
                    <li>
                    	<input type="checkbox" /><%= text %>
                    </li>
                </script>
	    	</ul>
	    	
	    	$('#flagme').smesh(data);

philosophy:
- implicit template definition and identification
    * definition = <!--FLIRT ... -->
    * identifaction = is in the element in which it will be applied
- template caching on the element and using jquery.al.data.js

new name: flirt (FLirt Is Resig's Templating)

move to ui widget structure: flirt('get', data) , flirt('set', data), flirt('append', data)
(instead of commit argument)

also: think about how much sophistication we really need. is it worth implementing
an approach which carefully puts parsed html in place of the template, without
touching non-flirts in the same container? or is it ok to just take over the entire
container?

TODO: Automatic nested looping (f.e. tags block: loop groups, then loop group members)

*/

/*

Next iteration API design:

$('ul').flirt('set', 'tmpl-name', data-object-or-list-of-data-objects);

$('ul').flirt('append', 'tmpl-name', data-object-or-list-of-data-objects);

var html = $('ul').flirt('get', 'tmpl-name', data-object-or-list-of-data-objects);


*/
/*

